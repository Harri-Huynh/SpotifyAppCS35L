[{"C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\index.js":"1","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\reportWebVitals.js":"2","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\App.js":"3","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\Firebase\\config.js":"4","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\context\\FirebaseContext.js":"5","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\SignUpForm.js":"6","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\SpotifyPage.js":"7","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\NavigationBar.js":"8"},{"size":744,"mtime":1686109188348,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1686032111288,"results":"11","hashOfConfig":"10"},{"size":889,"mtime":1686109188340,"results":"12","hashOfConfig":"10"},{"size":887,"mtime":1686109188341,"results":"13","hashOfConfig":"10"},{"size":137,"mtime":1686109188347,"results":"14","hashOfConfig":"10"},{"size":1905,"mtime":1686112409359,"results":"15","hashOfConfig":"10"},{"size":8646,"mtime":1686110117262,"results":"16","hashOfConfig":"10"},{"size":536,"mtime":1686109188343,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1lhtg0z",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"21"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\index.js",[],[],[],"C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\reportWebVitals.js",[],[],"C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\App.js",["46","47","48","49"],[],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport SignUpForm from './SignUpForm';\r\nimport NavigationBar from './NavigationBar';\r\nimport { useState } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport MainComponent from './SpotifyPage';\r\n\r\nfunction App() {\r\n  \r\n  const [userId, setUserId] = useState(\"\");\r\n\r\n  return (\r\n    <Router>\r\n      <NavigationBar></NavigationBar>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <div className=\"App\">\r\n            <SignUpForm></SignUpForm>\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/profile\">\r\n          <h1>Welcome!</h1>\r\n        </Route>\r\n        <Route path=\"/main\">\r\n          <div className=\"MainPage\">\r\n            <MainComponent/>\r\n          </div>\r\n        </Route>\r\n      </Switch>\r\n\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\Firebase\\config.js",["50"],[],"import { initializeApp } from \"firebase/app\";\r\nimport { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDX1CXAtkqj9Tg1HVYwlcocpkMxB-Y4NTw\",\r\n  authDomain: \"spotifybuds-e7e29.firebaseapp.com\",\r\n  databaseURL: \"https://spotifybuds-e7e29-default-rtdb.firebaseio.com\",\r\n  projectId: \"spotifybuds-e7e29\",\r\n  storageBucket: \"spotifybuds-e7e29.appspot.com\",\r\n  messagingSenderId: \"566960468786\",\r\n  appId: \"1:566960468786:web:cb73617f63fc5f79e45d2b\",\r\n  measurementId: \"G-N3X3577Z70\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\nexport { app };","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\context\\FirebaseContext.js",[],[],"C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\SignUpForm.js",["51","52","53"],[],"C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\SpotifyPage.js",["54","55","56","57","58","59","60"],[],"import React, { useEffect, useState } from 'react';\r\nimport firebase from 'firebase/app'\r\nimport { EmailAuthCredential, getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport { getDatabase, ref, set, get, onValue } from \"firebase/database\";\r\nimport { app } from './Firebase/config';\r\nimport \"./list.css\";\r\n\r\nconst clientID = \"4db376ff1b0941de8908d1748f1eb266\";\r\nconst redirectURL = \"http://localhost:3000/main\";\r\n\r\n\r\nconst MainComponent = () => {\r\n  const [name, setName] = useState(\"Nothing Currently Playing.\");\r\n  const [currentAccessToken, setToken] = useState(\"\");\r\n  const [uid, setUid] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [latitude, setLatitude] = useState(0.0);\r\n  const [longitude, setLongitude] = useState(0.0);\r\n  const [users, setUsers] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    const position = navigator.geolocation.getCurrentPosition((position) => {\r\n      setLatitude(position.coords.latitude);\r\n      setLongitude(position.coords.longitude);\r\n\r\n    });\r\n    const auth = getAuth();\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        // User is signed in, see docs for a list of available properties\r\n        // https://firebase.google.com/docs/reference/js/auth.user\r\n        const uid = user.uid;\r\n        const currentEmail = user.email;\r\n        console.log(\"userEmail \" + currentEmail);\r\n        setEmail(currentEmail);\r\n        setUid(uid);\r\n        // ...\r\n      } else {\r\n        console.log(\"signed out\");\r\n        // User is signed out\r\n        // ...\r\n      }\r\n    });\r\n\r\n    const params = new URLSearchParams(window.location.search);\r\n    const code = params.get('code');\r\n\r\n    const handleAuthentication = async () => {\r\n      if (!code) {\r\n        redirectToAuthCodeFlow(clientID);\r\n      } else {\r\n        console.log(\"got here!\");\r\n        if (currentAccessToken === \"\") {\r\n          await getAccessToken(clientID, code);\r\n        }\r\n\r\n\r\n        const profile = await fetchProfile();\r\n        //setToken(current);\r\n        if (profile !== null) {\r\n          if (profile.is_playing === true) {\r\n            setName(profile.item.name);\r\n            writeData(profile.item.name);\r\n\r\n          }\r\n          else {\r\n            setName(\"Nothing is currently playing.\")\r\n            getUsers();\r\n          }\r\n        }\r\n\r\n\r\n        else {\r\n          setName(\"Nothing is currently playing.\")\r\n          getUsers();\r\n        }\r\n      }\r\n    };\r\n\r\n    handleAuthentication();\r\n\r\n\r\n\r\n\r\n\r\n  }, []);\r\n\r\n  function writeData(currentPlayingSong) {\r\n\r\n\r\n    console.log(email);\r\n    const db = getDatabase();\r\n    set(ref(db, \"users/\" + uid), {\r\n      userName: email,\r\n      currentSong: currentPlayingSong,\r\n      latitude: latitude,\r\n      longitude: longitude\r\n    });\r\n  }\r\n\r\n  const getUsers = async () => {\r\n    const db = getDatabase();\r\n\r\n    const usersRef = ref(db, 'users');\r\n    get(usersRef).then((snapshot) => {\r\n      if (snapshot.exists()) {\r\n        const users = snapshot.val();\r\n        console.log(users);\r\n        const closest = findClosestUsers(latitude, longitude, users, 500);\r\n        console.log(\"closests: \" + closest[0]);\r\n        setUsers(closest);\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  //   if (dataSnapshot.exists()) {\r\n  //     const users = dataSnapshot.val();\r\n  //     console.log(\"users: \" + users.name);\r\n\r\n\r\n  //   } else {\r\n  //     console.log('No users found');\r\n  //   }\r\n  // } catch (error) {\r\n  //   console.log('Error getting users:', error);\r\n  // }\r\n\r\n\r\n\r\n  const params = new URLSearchParams(window.location.search);\r\n  const code = params.get('code')\r\n\r\n\r\n  const refresh = async () => {\r\n    if (currentAccessToken === \"\") {\r\n      await getAccessToken(clientID, code);\r\n    }\r\n    const profile = await fetchProfile();\r\n\r\n    if (profile !== null) {\r\n      if (profile.is_playing === true) {\r\n        setName(profile.item.name);\r\n        writeData(profile.item.name);\r\n        getUsers();\r\n      }\r\n      else {\r\n        getUsers();\r\n        setName(\"Nothing is currently playing.\")\r\n      }\r\n    }\r\n\r\n\r\n    else {\r\n      getUsers();\r\n      setName(\"Nothing is currently playing.\")\r\n    }\r\n\r\n    console.log(\"users: \" + users[0].user);\r\n\r\n  }\r\n\r\n  async function redirectToAuthCodeFlow(clientId) {\r\n    const verifier = generateCodeVerifier(128);\r\n    const challenge = await generateCodeChallenge(verifier);\r\n\r\n    localStorage.setItem(\"verifier\", verifier);\r\n\r\n    const params = new URLSearchParams();\r\n    params.append(\"client_id\", clientId);\r\n    params.append(\"response_type\", \"code\");\r\n    params.append(\"redirect_uri\", redirectURL);\r\n    params.append(\"scope\", \"user-read-private user-read-email user-read-currently-playing user-read-recently-played\");\r\n    params.append(\"code_challenge_method\", \"S256\");\r\n    params.append(\"code_challenge\", challenge);\r\n\r\n    document.location = `https://accounts.spotify.com/authorize?${params.toString()}`;\r\n  }\r\n\r\n  function generateCodeVerifier(length) {\r\n    let text = '';\r\n    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  }\r\n\r\n  async function generateCodeChallenge(codeVerifier) {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(codeVerifier);\r\n    const digest = await window.crypto.subtle.digest('SHA-256', data);\r\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\r\n      .replace(/\\+/g, '-')\r\n      .replace(/\\//g, '_')\r\n      .replace(/=+$/, '');\r\n  }\r\n\r\n  async function getAccessToken(clientId, code) {\r\n    const verifier = localStorage.getItem(\"verifier\");\r\n\r\n    const params = new URLSearchParams();\r\n    params.append(\"client_id\", clientId);\r\n    params.append(\"grant_type\", \"authorization_code\");\r\n    params.append(\"code\", code);\r\n    params.append(\"redirect_uri\", \"http://localhost:3000/main\");\r\n    params.append(\"code_verifier\", verifier);\r\n\r\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: params\r\n    });\r\n\r\n    const { access_token } = await result.json();\r\n\r\n    if (access_token !== undefined) {\r\n      setToken(access_token);\r\n      localStorage.setItem(\"accessToken\", access_token);\r\n    }\r\n    return access_token;\r\n  }\r\n\r\n  async function fetchProfile() {\r\n    const token = localStorage.getItem(\"accessToken\");\r\n    const result = await fetch(\"https://api.spotify.com/v1/me/player/currently-playing\", {\r\n      method: \"GET\",\r\n      headers: { Authorization: `Bearer ${token}` }\r\n    });\r\n    if (result.status === 204) {\r\n      return null;\r\n    }\r\n    return await result.json();\r\n  }\r\n\r\n  function calculateDistance(lat1, lon1, lat2, lon2) {\r\n    const earthRadiusInFeet = 20903520; // Approximate Earth radius in feet\r\n    const dLat = toRadians(lat2 - lat1);\r\n    const dLon = toRadians(lon2 - lon1);\r\n    const a =\r\n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n      Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *\r\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    const distanceInFeet = earthRadiusInFeet * c;\r\n    const roundedDistance = distanceInFeet.toFixed(2); // Round to two decimal places\r\n    return roundedDistance;\r\n  }\r\n\r\n  function toRadians(degrees) {\r\n    return degrees * (Math.PI / 180);\r\n  }\r\n\r\n  function findClosestUsers(userLat, userLon, database, radius) {\r\n    const distances = [];\r\n    //onsole.log(\"Database: \" + database);\r\n    for (const person in database) {\r\n      //console.log(database[person]);\r\n      const distance = calculateDistance(userLat, userLon, database[person].latitude, database[person].longitude);\r\n      //console.log(\"distance: \" + distance);\r\n      if (distance <= radius) {\r\n        distances.push({ user: database[person].userName, distance: distance, song: database[person].currentSong });\r\n      }\r\n    }\r\n\r\n    distances.sort((a, b) => a.distance - b.distance);\r\n    console.log(\"this.state.distances:\", distances);\r\n    return distances;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"box\">\r\n      <div className=\"list-container\">\r\n        <ul className=\"list\">\r\n          {users.map(item => {\r\n            console.log(item[0]); // Log the userName to the console\r\n            return (\r\n              <li key={item.id}>{item.user} {\" \"} {item.song}</li>\r\n            );\r\n          })}\r\n        </ul>\r\n\r\n      </div>\r\n      <button onClick={() => refresh()}>Refresh</button>\r\n    </div>\r\n  );\r\n\r\n\r\n};\r\n\r\nexport default MainComponent;","C:\\Users\\harri\\OneDrive\\Documents\\GitHub\\SpotifyAppCS35L\\src\\NavigationBar.js",[],[],{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":12},{"ruleId":"61","severity":1,"message":"65","line":10,"column":3,"nodeType":"63","messageId":"64","endLine":10,"endColumn":7},{"ruleId":"61","severity":1,"message":"66","line":17,"column":10,"nodeType":"63","messageId":"64","endLine":17,"endColumn":16},{"ruleId":"61","severity":1,"message":"67","line":17,"column":18,"nodeType":"63","messageId":"64","endLine":17,"endColumn":27},{"ruleId":"61","severity":1,"message":"68","line":21,"column":7,"nodeType":"63","messageId":"64","endLine":21,"endColumn":16},{"ruleId":"61","severity":1,"message":"69","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":37},{"ruleId":"61","severity":1,"message":"70","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":25},{"ruleId":"61","severity":1,"message":"71","line":4,"column":10,"nodeType":"63","messageId":"64","endLine":4,"endColumn":13},{"ruleId":"61","severity":1,"message":"72","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":16},{"ruleId":"61","severity":1,"message":"73","line":3,"column":10,"nodeType":"63","messageId":"64","endLine":3,"endColumn":29},{"ruleId":"61","severity":1,"message":"74","line":4,"column":38,"nodeType":"63","messageId":"64","endLine":4,"endColumn":45},{"ruleId":"61","severity":1,"message":"71","line":5,"column":10,"nodeType":"63","messageId":"64","endLine":5,"endColumn":13},{"ruleId":"61","severity":1,"message":"75","line":13,"column":10,"nodeType":"63","messageId":"64","endLine":13,"endColumn":14},{"ruleId":"61","severity":1,"message":"76","line":24,"column":11,"nodeType":"63","messageId":"64","endLine":24,"endColumn":19},{"ruleId":"77","severity":1,"message":"78","line":88,"column":6,"nodeType":"79","endLine":88,"endColumn":8,"suggestions":"80"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'analytics' is assigned a value but never used.","'useContext' is defined but never used.","'FirebaseContext' is defined but never used.","'app' is defined but never used.","'firebase' is defined but never used.","'EmailAuthCredential' is defined but never used.","'onValue' is defined but never used.","'name' is assigned a value but never used.","'position' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentAccessToken', 'getUsers', 'redirectToAuthCodeFlow', and 'writeData'. Either include them or remove the dependency array.","ArrayExpression",["81"],{"desc":"82","fix":"83"},"Update the dependencies array to be: [currentAccessToken, getUsers, redirectToAuthCodeFlow, writeData]",{"range":"84","text":"85"},[2479,2481],"[currentAccessToken, getUsers, redirectToAuthCodeFlow, writeData]"]